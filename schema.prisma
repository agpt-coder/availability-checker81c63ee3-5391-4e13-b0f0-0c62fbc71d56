// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider                    = "prisma-client-py"
  interface                   = "asyncio"
  recursive_type_depth        = 5
  previewFeatures             = ["postgresqlExtensions"]
  enable_experimental_decimal = true
}

model User {
  id            Int            @id @default(autoincrement())
  email         String         @unique
  password      String
  role          Role
  profiles      Profile[]
  bookings      Booking[]
  notifications Notification[]
}

model Profile {
  id          Int            @id @default(autoincrement())
  userId      Int
  firstName   String
  lastName    String
  phoneNumber String?
  user        User           @relation(fields: [userId], references: [id])
  favorites   Professional[] @relation("UserFavorites")
}

model Professional {
  id             Int       @id @default(autoincrement())
  email          String    @unique
  specialty      String
  availableSlots Slot[]
  favoritesBy    Profile[] @relation("UserFavorites")
}

model Slot {
  id             Int          @id @default(autoincrement())
  startTime      DateTime
  endTime        DateTime
  professionalId Int
  professional   Professional @relation(fields: [professionalId], references: [id])
  bookings       Booking[]
  isActive       Boolean      @default(true)
}

model Booking {
  id        Int           @id @default(autoincrement())
  userId    Int
  slotId    Int
  createdAt DateTime      @default(now())
  user      User          @relation(fields: [userId], references: [id])
  slot      Slot          @relation(fields: [slotId], references: [id])
  status    BookingStatus
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  createdAt DateTime @default(now())
  read      Boolean  @default(false)
  user      User     @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  PROFESSIONAL
  REGISTERED_USER
  GUEST
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
}